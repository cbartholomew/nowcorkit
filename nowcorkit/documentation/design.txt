Nowcorkit
Design

Disclaimer: 
I'm very, very tired as I've been working on this along side of my full time job for the past three weeks. I apologize
if I miss anything in this documentation since as you can see, through the more than thousands of lines of codes
spread across the 45 code files that it's hard to manage every piece of feature I intended to write about. 

I've posted a known bug list at the bottom of the documentation page because I just haven't had time to fix all of them yet. This was
really difficult to work on alone @_@, but it was worth the valuable lesson in the end. 

Languages:

I chose PHP because I've spent a lot of time learning C this semester. I didn't want to lose those skills, so I decided to try PHP, which was a new language for me. PHP is supported across all browsers, and I don't feel I would have a problem with html rendering. For client side languages I decided on JQuery and Javascript. Jquery mostly because I was using Jquery UI to assist with my layout, but also I could use Jquery to do a variety of client side tricks, which would allow ease of ajax calls and button rendering. 

I built a variety of classes on the PHP side, so I can easily encode them into json objects to be passed between server side and client side. 

Backend:

On the backend, I used MYSQL to hold my data. I have tried to make the database as relational as possible whereby even tables, which contain just "type" information have its own id. for example, permission_type - has the types of permissions descriptions w/ its own id that I can link. There are 14 tables all together, which help control how content is handled. This includes tables that are used for holding three different types of flyers, users & flyers, users & boards, users & postings, boards & postings, to give you an idea. there is usually one table, which links all the ids together, those tables are the ones that I use to pull data from because I can get everything that touches those specific tables (as they are all linked) - an example of this is users_flyers table whereby using its own id, can connect a user to a flyer, and flyer to a type. Because I have three different types of flyers text,image & text, and image - this was necessary.  

Sessions are handled using the "users_cork_id", which is assigned to every user. This is used mostly to keep authentication true throughout the application. And customize some menus when we are looking for specific states, for example, to post information.

Client-Side:

I recommend using a HTML5 compatible browser. I prefer using Chrome as it seems to work the best w/ the heavy jquery/javascript/ and my own helper.js library. I have not yet applied a script to redirect users that do not have a proper browser. I will do so, very soon however... I used HTML5 because it's pretty. It's functional and can be user friendly. Furthermore, jquery providers a great UI that makes it easy for layouts to look good. 

I used json to handle data passing between my php ajax calls  because it's far easier to handle an object then an actual xml page. I use json to return a lot of data to the corkboard for it to process, which flyers are needed to be displayed. 

Another client side choice was the use of QRcode technology. I use google charts api to construct a QRcode w/ a link to generate a flyer. It's pretty helpful to have QRcodes that will help you remember what flyer you saw, without messing w/ the paper tabs that one normally sees.

Drag and Drop, for example, is a great HTML feature that I implemented into my project. Whereby the user can actually drag and drop the flyer they wish to use. I don't support PDF, because I didn't want to spend more time writing a PDF to image converter. For now, I allow: jpg/jpeg/gif/png. 

For all validation, other than registration and login, I use jquery. Jquery allows me to control all the events that occur on the page in extreme detail as numbers, digits, required, min length, min val, etc. It provides a helper to display those messages in text fields too. I can make the page more interactive w/ jquery.

Layout:

I use layouts that are specific to both mozilla and chrome. The layouts contain CSS3.0, and there are a few layouts for different pages. Validation, for one, requires a different layout file then the main. I did this because I wanted to keep those files separated as there is a lot going on. 

In the end, the choice to move forward with efficient HTML5 browsers, like chrome, helped me make an interactive application that seems to work ok. It's a corkboard, so in order for people to want to use it - well, it needs to be "cool" (i guess?). 

christopher.